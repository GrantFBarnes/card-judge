DROP DATABASE IF EXISTS CARD_JUDGE;

CREATE DATABASE CARD_JUDGE
    CHARACTER SET = 'UTF8MB4'
    COLLATE = 'UTF8MB4_UNICODE_CI';

USE CARD_JUDGE;

SET GLOBAL EVENT_SCHEDULER = ON;

CREATE TABLE USER
(
    ID UUID NOT NULL DEFAULT UUID(),
    CREATED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    CHANGED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),

    NAME VARCHAR(255) NOT NULL,
    PASSWORD_HASH CHAR(60) NOT NULL,
    COLOR_THEME VARCHAR(255) NULL,
    IS_ADMIN BOOLEAN NOT NULL DEFAULT 0,

    PRIMARY KEY (ID),
    CONSTRAINT NAME_UNIQUE UNIQUE (NAME)
);

CREATE TRIGGER TR_USER_BF_UP_SET_CHANGED_ON_DATE
BEFORE UPDATE ON USER
FOR EACH ROW
SET NEW.CHANGED_ON_DATE = CURRENT_TIMESTAMP();

CREATE TABLE DECK
(
    ID UUID NOT NULL DEFAULT UUID(),
    CREATED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    CHANGED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),

    NAME VARCHAR(255) NOT NULL,
    PASSWORD_HASH CHAR(60) NOT NULL,
    IS_PUBLIC_READONLY BOOLEAN NOT NULL DEFAULT 0,

    PRIMARY KEY (ID),
    CONSTRAINT NAME_UNIQUE UNIQUE (NAME)
);

CREATE TRIGGER TR_DECK_BF_UP_SET_CHANGED_ON_DATE
BEFORE UPDATE ON DECK
FOR EACH ROW
SET NEW.CHANGED_ON_DATE = CURRENT_TIMESTAMP();

CREATE TABLE CARD
(
    ID UUID NOT NULL DEFAULT UUID(),
    CREATED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    CHANGED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),

    DECK_ID UUID NOT NULL,
    CATEGORY ENUM('PROMPT','RESPONSE') NOT NULL DEFAULT 'PROMPT',
    TEXT VARCHAR(510) NOT NULL,

    PRIMARY KEY (ID),
    FOREIGN KEY (DECK_ID) REFERENCES DECK (ID) ON DELETE CASCADE,
    CONSTRAINT DECK_TEXT_UNIQUE UNIQUE (DECK_ID, TEXT)
);

CREATE TRIGGER TR_CARD_BF_UP_SET_CHANGED_ON_DATE
BEFORE UPDATE ON CARD
FOR EACH ROW
SET NEW.CHANGED_ON_DATE = CURRENT_TIMESTAMP();

CREATE TABLE LOBBY
(
    ID UUID NOT NULL DEFAULT UUID(),
    CREATED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    CHANGED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),

    NAME VARCHAR(255) NOT NULL,
    PASSWORD_HASH CHAR(60) NULL,
    HAND_SIZE INT NOT NULL DEFAULT 8,
    CREDIT_LIMIT INT NOT NULL DEFAULT 3,

    PRIMARY KEY (ID),
    CONSTRAINT NAME_UNIQUE UNIQUE (NAME)
);

CREATE TRIGGER TR_LOBBY_BF_UP_SET_CHANGED_ON_DATE
BEFORE UPDATE ON LOBBY
FOR EACH ROW
SET NEW.CHANGED_ON_DATE = CURRENT_TIMESTAMP();

CREATE TABLE USER_ACCESS_DECK
(
    ID UUID NOT NULL DEFAULT UUID(),
    CREATED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    CHANGED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),

    USER_ID UUID NOT NULL,
    DECK_ID UUID NOT NULL,

    PRIMARY KEY (ID),
    FOREIGN KEY (USER_ID) REFERENCES USER (ID) ON DELETE CASCADE,
    FOREIGN KEY (DECK_ID) REFERENCES DECK (ID) ON DELETE CASCADE,
    CONSTRAINT USER_DECK_UNIQUE UNIQUE (USER_ID, DECK_ID)
);

CREATE TRIGGER TR_USER_ACCESS_DECK_BF_UP_SET_CHANGED_ON_DATE
BEFORE UPDATE ON USER_ACCESS_DECK
FOR EACH ROW
SET NEW.CHANGED_ON_DATE = CURRENT_TIMESTAMP();

DELIMITER //
CREATE TRIGGER TR_DECK_AF_UP_REVOKE_ACCESS
AFTER UPDATE ON DECK
FOR EACH ROW
BEGIN
    IF OLD.PASSWORD_HASH <> NEW.PASSWORD_HASH THEN
        DELETE FROM USER_ACCESS_DECK
        WHERE DECK_ID = NEW.ID;
    END IF;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE SP_USER_HAS_DECK_ACCESS (
    IN VAR_USER_ID UUID,
    IN VAR_DECK_ID UUID
)
BEGIN
    IF EXISTS(
        SELECT ID
        FROM USER
        WHERE ID = VAR_USER_ID
            AND IS_ADMIN = 1
    ) THEN
        SELECT 1;
    ELSEIF EXISTS(
        SELECT ID
        FROM USER_ACCESS_DECK
        WHERE USER_ID = VAR_USER_ID
            AND DECK_ID = VAR_DECK_ID
    ) THEN
        SELECT 1;
    ELSE
        SELECT 0;
    END IF;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE SP_GET_READABLE_DECKS (
    IN VAR_USER_ID UUID
)
BEGIN
    IF EXISTS(
        SELECT ID
        FROM USER
        WHERE ID = VAR_USER_ID
            AND IS_ADMIN = 1
    ) THEN
        SELECT
            D.ID,
            D.NAME
        FROM DECK AS D
        WHERE D.ID <> '00000000-0000-0000-0000-000000000000'
        ORDER BY D.NAME ASC;
    ELSE
        SELECT
            D.ID,
            D.NAME
        FROM DECK AS D
            LEFT JOIN USER_ACCESS_DECK AS UAD ON UAD.DECK_ID = D.ID
        WHERE D.ID <> '00000000-0000-0000-0000-000000000000'
            AND (UAD.USER_ID = VAR_USER_ID OR D.IS_PUBLIC_READONLY)
        ORDER BY D.NAME ASC;
    END IF;
END;
//
DELIMITER ;

CREATE TABLE USER_ACCESS_LOBBY
(
    ID UUID NOT NULL DEFAULT UUID(),
    CREATED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    CHANGED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),

    USER_ID UUID NOT NULL,
    LOBBY_ID UUID NOT NULL,

    PRIMARY KEY (ID),
    FOREIGN KEY (USER_ID) REFERENCES USER (ID) ON DELETE CASCADE,
    FOREIGN KEY (LOBBY_ID) REFERENCES LOBBY (ID) ON DELETE CASCADE,
    CONSTRAINT USER_LOBBY_UNIQUE UNIQUE (USER_ID, LOBBY_ID)
);

CREATE TRIGGER TR_USER_ACCESS_LOBBY_BF_UP_SET_CHANGED_ON_DATE
BEFORE UPDATE ON USER_ACCESS_LOBBY
FOR EACH ROW
SET NEW.CHANGED_ON_DATE = CURRENT_TIMESTAMP();

DELIMITER //
CREATE TRIGGER TR_LOBBY_AF_UP_REVOKE_ACCESS
AFTER UPDATE ON LOBBY
FOR EACH ROW
BEGIN
    IF OLD.PASSWORD_HASH <> NEW.PASSWORD_HASH THEN
        DELETE FROM USER_ACCESS_LOBBY
        WHERE LOBBY_ID = NEW.ID;
    END IF;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE SP_USER_HAS_LOBBY_ACCESS (
    IN VAR_USER_ID UUID,
    IN VAR_LOBBY_ID UUID
)
BEGIN
    IF EXISTS(
        SELECT ID
        FROM USER
        WHERE ID = VAR_USER_ID
            AND IS_ADMIN = 1
    ) THEN
        SELECT 1;
    ELSEIF EXISTS(
        SELECT ID
        FROM USER_ACCESS_LOBBY
        WHERE USER_ID = VAR_USER_ID
            AND LOBBY_ID = VAR_LOBBY_ID
    ) THEN
        SELECT 1;
    ELSE
        SELECT PASSWORD_HASH IS NULL
        FROM LOBBY
        WHERE ID = VAR_LOBBY_ID;
    END IF;
END;
//
DELIMITER ;

CREATE TABLE DRAW_PILE
(
    ID UUID NOT NULL DEFAULT UUID(),
    CREATED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    CHANGED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),

    LOBBY_ID UUID NOT NULL,
    CARD_ID UUID NOT NULL,

    PRIMARY KEY (ID),
    FOREIGN KEY (LOBBY_ID) REFERENCES LOBBY (ID) ON DELETE CASCADE,
    FOREIGN KEY (CARD_ID) REFERENCES CARD (ID) ON DELETE CASCADE,
    CONSTRAINT LOBBY_CARD_UNIQUE UNIQUE (LOBBY_ID, CARD_ID)
);

CREATE TRIGGER TR_DRAW_PILE_BF_UP_SET_CHANGED_ON_DATE
BEFORE UPDATE ON DRAW_PILE
FOR EACH ROW
SET NEW.CHANGED_ON_DATE = CURRENT_TIMESTAMP();

CREATE TABLE PLAYER
(
    ID UUID NOT NULL DEFAULT UUID(),
    CREATED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    CHANGED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),

    LOBBY_ID UUID NOT NULL,
    USER_ID UUID NOT NULL,
    IS_ACTIVE BOOLEAN NOT NULL DEFAULT 1,
    CREDITS_SPENT INT NOT NULL DEFAULT 0,

    PRIMARY KEY (ID),
    FOREIGN KEY (LOBBY_ID) REFERENCES LOBBY (ID) ON DELETE CASCADE,
    FOREIGN KEY (USER_ID) REFERENCES USER (ID) ON DELETE CASCADE,
    CONSTRAINT LOBBY_USER_UNIQUE UNIQUE (LOBBY_ID, USER_ID)
);

CREATE TRIGGER TR_PLAYER_BF_UP_SET_CHANGED_ON_DATE
BEFORE UPDATE ON PLAYER
FOR EACH ROW
SET NEW.CHANGED_ON_DATE = CURRENT_TIMESTAMP();

DELIMITER //
CREATE PROCEDURE SP_SET_PLAYER_ACTIVE (
    IN VAR_PLAYER_ID UUID,
    IN VAR_LOBBY_ID UUID,
    IN VAR_USER_ID UUID
)
BEGIN
    IF EXISTS(
        SELECT ID
        FROM PLAYER
        WHERE ID = VAR_PLAYER_ID
    ) THEN
        UPDATE PLAYER
        SET IS_ACTIVE = 1
        WHERE ID = VAR_PLAYER_ID;
    ELSE
        INSERT INTO PLAYER (ID, LOBBY_ID, USER_ID)
        VALUES (VAR_PLAYER_ID, VAR_LOBBY_ID, VAR_USER_ID);
    END IF;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE SP_SET_PLAYER_INACTIVE (
    IN VAR_LOBBY_ID UUID,
    IN VAR_USER_ID UUID
)
BEGIN
    DECLARE VAR_PLAYER_ID UUID;

    SELECT ID
    INTO VAR_PLAYER_ID
    FROM PLAYER
    WHERE LOBBY_ID = VAR_LOBBY_ID
        AND USER_ID = VAR_USER_ID;

    UPDATE PLAYER
    SET IS_ACTIVE = 0
    WHERE ID = VAR_PLAYER_ID;

    DELETE FROM BOARD
    WHERE PLAYER_ID = VAR_PLAYER_ID;
END;
//
DELIMITER ;

CREATE TABLE HAND
(
    ID UUID NOT NULL DEFAULT UUID(),
    CREATED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    CHANGED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),

    PLAYER_ID UUID NOT NULL,
    CARD_ID UUID NOT NULL,
    IS_LOCKED BOOLEAN NOT NULL DEFAULT 0,

    PRIMARY KEY (ID),
    FOREIGN KEY (PLAYER_ID) REFERENCES PLAYER (ID) ON DELETE CASCADE,
    FOREIGN KEY (CARD_ID) REFERENCES CARD (ID) ON DELETE CASCADE,
    CONSTRAINT PLAYER_CARD_UNIQUE UNIQUE (PLAYER_ID, CARD_ID)
);

CREATE TRIGGER TR_HAND_BF_UP_SET_CHANGED_ON_DATE
BEFORE UPDATE ON HAND
FOR EACH ROW
SET NEW.CHANGED_ON_DATE = CURRENT_TIMESTAMP();

DELIMITER //
CREATE PROCEDURE SP_DRAW_HAND (
    IN VAR_PLAYER_ID UUID
)
BEGIN
    DECLARE VAR_LOBBY_HAND_SIZE INT;
    DECLARE VAR_PLAYER_HAND_SIZE INT;
    DECLARE VAR_CARDS_TO_DRAW INT;

    SELECT L.HAND_SIZE
    INTO VAR_LOBBY_HAND_SIZE
    FROM LOBBY AS L
        INNER JOIN PLAYER AS P ON P.LOBBY_ID = L.ID
    WHERE P.ID = VAR_PLAYER_ID;

    SELECT COUNT(CARD_ID)
    INTO VAR_PLAYER_HAND_SIZE
    FROM HAND
    WHERE PLAYER_ID = VAR_PLAYER_ID;

    SET VAR_CARDS_TO_DRAW = VAR_LOBBY_HAND_SIZE - VAR_PLAYER_HAND_SIZE;

    INSERT INTO HAND (
        PLAYER_ID,
        CARD_ID
    )
    SELECT
        P.ID AS PLAYER_ID,
        C.ID AS CARD_ID
    FROM DRAW_PILE AS DP
        INNER JOIN PLAYER AS P ON P.LOBBY_ID = DP.LOBBY_ID
        INNER JOIN CARD AS C ON C.ID = DP.CARD_ID
    WHERE C.CATEGORY = 'RESPONSE'
        AND P.ID = VAR_PLAYER_ID
    ORDER BY RAND()
    LIMIT VAR_CARDS_TO_DRAW;

    DELETE DP
    FROM DRAW_PILE AS DP
        INNER JOIN PLAYER AS P ON P.LOBBY_ID = DP.LOBBY_ID
        INNER JOIN HAND AS H ON H.PLAYER_ID = P.ID AND H.CARD_ID = DP.CARD_ID
    WHERE P.ID = VAR_PLAYER_ID;

    INSERT INTO LOG_DRAW (
        PLAYER_USER_ID,
        CARD_ID
    )
    SELECT
        P.USER_ID AS PLAYER_USER_ID,
        H.CARD_ID
    FROM HAND AS H
        INNER JOIN PLAYER AS P ON P.ID = H.PLAYER_ID
    WHERE P.ID = VAR_PLAYER_ID
    ORDER BY H.CREATED_ON_DATE DESC
    LIMIT VAR_CARDS_TO_DRAW;
END;
//
DELIMITER ;

CREATE TRIGGER TR_PLAYER_AF_IN_DRAW_HAND
AFTER INSERT ON PLAYER
FOR EACH ROW
CALL SP_DRAW_HAND (NEW.ID);

CREATE TABLE JUDGE
(
    ID UUID NOT NULL DEFAULT UUID(),
    CREATED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    CHANGED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),

    LOBBY_ID UUID NOT NULL,
    PLAYER_ID UUID NOT NULL,
    CARD_ID UUID NOT NULL,

    PRIMARY KEY (ID),
    FOREIGN KEY (LOBBY_ID) REFERENCES LOBBY (ID) ON DELETE CASCADE,
    FOREIGN KEY (PLAYER_ID) REFERENCES PLAYER (ID) ON DELETE CASCADE,
    FOREIGN KEY (CARD_ID) REFERENCES CARD (ID) ON DELETE CASCADE,
    CONSTRAINT LOBBY_UNIQUE UNIQUE (LOBBY_ID),
    CONSTRAINT PLAYER_UNIQUE UNIQUE (PLAYER_ID)
);

CREATE TRIGGER TR_JUDGE_BF_UP_SET_CHANGED_ON_DATE
BEFORE UPDATE ON JUDGE
FOR EACH ROW
SET NEW.CHANGED_ON_DATE = CURRENT_TIMESTAMP();

DELIMITER //
CREATE PROCEDURE SP_GET_RANDOM_LOBBY_PLAYER (
    IN VAR_LOBBY_ID UUID,
    OUT VAR_PLAYER_ID UUID
)
BEGIN
    SELECT ID
    INTO VAR_PLAYER_ID
    FROM PLAYER
    WHERE LOBBY_ID = VAR_LOBBY_ID
        AND IS_ACTIVE = 1
    ORDER BY RAND()
    LIMIT 1;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE SP_GET_RANDOM_PROMPT_CARD (
    IN VAR_LOBBY_ID UUID,
    OUT VAR_CARD_ID UUID
)
BEGIN
    SELECT C.ID
    INTO VAR_CARD_ID
    FROM DRAW_PILE AS DP
        INNER JOIN CARD AS C ON C.ID = DP.CARD_ID
    WHERE C.CATEGORY = 'PROMPT'
        AND DP.LOBBY_ID = VAR_LOBBY_ID
    ORDER BY RAND()
    LIMIT 1;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE SP_SET_JUDGE (
    IN VAR_LOBBY_ID UUID,
    IN VAR_PLAYER_ID UUID
)
BEGIN
    DECLARE VAR_CARD_ID UUID;
    CALL SP_GET_RANDOM_PROMPT_CARD (VAR_LOBBY_ID, VAR_CARD_ID);

    IF VAR_CARD_ID IS NULL THEN
        DELETE FROM JUDGE
        WHERE LOBBY_ID = VAR_LOBBY_ID;
    ELSE
        INSERT IGNORE INTO JUDGE (LOBBY_ID, PLAYER_ID, CARD_ID)
        VALUES (VAR_LOBBY_ID, VAR_PLAYER_ID, VAR_CARD_ID);

        UPDATE JUDGE
        SET
            PLAYER_ID = VAR_PLAYER_ID,
            CARD_ID = VAR_CARD_ID
        WHERE LOBBY_ID = VAR_LOBBY_ID;

        DELETE FROM DRAW_PILE
        WHERE CARD_ID = VAR_CARD_ID;

        DELETE B
        FROM BOARD AS B
            INNER JOIN JUDGE AS J ON J.PLAYER_ID = B.PLAYER_ID
        WHERE B.LOBBY_ID = VAR_LOBBY_ID;
    END IF;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE SP_SET_MISSING_JUDGE (
    IN VAR_LOBBY_ID UUID
)
BEGIN
    DECLARE VAR_PLAYER_ID UUID;

    SELECT P.ID
    INTO VAR_PLAYER_ID
    FROM JUDGE AS J
        INNER JOIN PLAYER AS P ON P.ID = J.PLAYER_ID
    WHERE J.LOBBY_ID = VAR_LOBBY_ID
        AND P.IS_ACTIVE = 1;

    IF VAR_PLAYER_ID IS NULL THEN
        CALL SP_GET_RANDOM_LOBBY_PLAYER (VAR_LOBBY_ID, VAR_PLAYER_ID);
        IF VAR_PLAYER_ID IS NOT NULL THEN
            CALL SP_SET_JUDGE (VAR_LOBBY_ID, VAR_PLAYER_ID);
        END IF;
    END IF;
END;
//
DELIMITER ;

CREATE TRIGGER TR_PLAYER_AF_IN_SET_MISSING_JUDGE
AFTER INSERT ON PLAYER
FOR EACH ROW
CALL SP_SET_MISSING_JUDGE (NEW.LOBBY_ID);

DELIMITER //
CREATE TRIGGER TR_PLAYER_AF_UP_SET_MISSING_JUDGE
AFTER UPDATE ON PLAYER
FOR EACH ROW
BEGIN
    IF OLD.IS_ACTIVE <> NEW.IS_ACTIVE THEN
        CALL SP_SET_MISSING_JUDGE (NEW.LOBBY_ID);
    END IF;
END;
//
DELIMITER ;

CREATE TRIGGER TR_PLAYER_AF_DL_SET_MISSING_JUDGE
AFTER DELETE ON PLAYER
FOR EACH ROW
CALL SP_SET_MISSING_JUDGE (OLD.LOBBY_ID);

DELIMITER //
CREATE PROCEDURE SP_SKIP_PROMPT (
    IN VAR_LOBBY_ID UUID
)
BEGIN
    DECLARE VAR_CARD_ID UUID;

    INSERT INTO LOG_SKIP (PLAYER_USER_ID, CARD_ID)
    SELECT
        P.USER_ID AS PLAYER_USER_ID,
        J.CARD_ID
    FROM JUDGE AS J
        INNER JOIN PLAYER AS P ON P.ID = J.PLAYER_ID
    WHERE J.LOBBY_ID = VAR_LOBBY_ID;

    CALL SP_GET_RANDOM_PROMPT_CARD (VAR_LOBBY_ID, VAR_CARD_ID);

    IF VAR_CARD_ID IS NULL THEN
        DELETE FROM JUDGE
        WHERE LOBBY_ID = VAR_LOBBY_ID;
    ELSE
        UPDATE JUDGE
        SET CARD_ID = VAR_CARD_ID
        WHERE LOBBY_ID = VAR_LOBBY_ID;

        DELETE FROM DRAW_PILE
        WHERE CARD_ID = VAR_CARD_ID;
    END IF;
END;
//
DELIMITER ;

CREATE TABLE BOARD
(
    ID UUID NOT NULL DEFAULT UUID(),
    CREATED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    CHANGED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),

    LOBBY_ID UUID NOT NULL,
    PLAYER_ID UUID NOT NULL,
    CARD_ID UUID NOT NULL,
    SPECIAL_CATEGORY ENUM('STEAL','SURPRISE','WILD') NULL DEFAULT NULL,

    PRIMARY KEY (ID),
    FOREIGN KEY (LOBBY_ID) REFERENCES LOBBY (ID) ON DELETE CASCADE,
    FOREIGN KEY (PLAYER_ID) REFERENCES PLAYER (ID) ON DELETE CASCADE,
    FOREIGN KEY (CARD_ID) REFERENCES CARD (ID) ON DELETE CASCADE
);

CREATE TRIGGER TR_BOARD_BF_UP_SET_CHANGED_ON_DATE
BEFORE UPDATE ON BOARD
FOR EACH ROW
SET NEW.CHANGED_ON_DATE = CURRENT_TIMESTAMP();

CREATE TABLE WIN
(
    ID UUID NOT NULL DEFAULT UUID(),
    CREATED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    CHANGED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),

    LOBBY_ID UUID NOT NULL,
    PLAYER_ID UUID NOT NULL,

    PRIMARY KEY (ID),
    FOREIGN KEY (LOBBY_ID) REFERENCES LOBBY (ID) ON DELETE CASCADE,
    FOREIGN KEY (PLAYER_ID) REFERENCES PLAYER (ID) ON DELETE CASCADE
);

CREATE TRIGGER TR_WIN_BF_UP_SET_CHANGED_ON_DATE
BEFORE UPDATE ON WIN
FOR EACH ROW
SET NEW.CHANGED_ON_DATE = CURRENT_TIMESTAMP();

CREATE TRIGGER TR_WIN_AF_IN_SET_JUDGE
AFTER INSERT ON WIN
FOR EACH ROW
CALL SP_SET_JUDGE (NEW.LOBBY_ID, NEW.PLAYER_ID);

DELIMITER //
CREATE PROCEDURE SP_PLAY_CARD (
    IN VAR_PLAYER_ID UUID,
    IN VAR_CARD_ID UUID,
    IN VAR_SPECIAL_CATEGORY ENUM('STEAL','SURPRISE','WILD')
)
BEGIN
    DECLARE VAR_LOBBY_ID UUID;
    DECLARE VAR_PLAYER_USER_ID UUID;
    DECLARE VAR_JUDGE_USER_ID UUID;

    SELECT
        LOBBY_ID,
        USER_ID
    INTO
        VAR_LOBBY_ID,
        VAR_PLAYER_USER_ID
    FROM PLAYER
    WHERE ID = VAR_PLAYER_ID;

    SELECT P.USER_ID
    INTO VAR_JUDGE_USER_ID
    FROM JUDGE AS J
        INNER JOIN PLAYER AS P ON P.ID = J.PLAYER_ID
    WHERE J.LOBBY_ID = VAR_LOBBY_ID;

    INSERT INTO BOARD (LOBBY_ID, PLAYER_ID, CARD_ID, SPECIAL_CATEGORY)
    VALUES (VAR_LOBBY_ID, VAR_PLAYER_ID, VAR_CARD_ID, VAR_SPECIAL_CATEGORY);

    INSERT INTO LOG_PLAY (PLAYER_USER_ID, JUDGE_USER_ID, CARD_ID, SPECIAL_CATEGORY)
    VALUES (VAR_PLAYER_USER_ID, VAR_JUDGE_USER_ID, VAR_CARD_ID, VAR_SPECIAL_CATEGORY);

    DELETE FROM HAND
    WHERE PLAYER_ID = VAR_PLAYER_ID
        AND CARD_ID = VAR_CARD_ID;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE SP_PLAY_STEAL_CARD (
    IN VAR_PLAYER_ID UUID
)
BEGIN
    DECLARE VAR_LOBBY_ID UUID;
    DECLARE VAR_PLAYER_USER_ID UUID;
    DECLARE VAR_VICTIM_PLAYER_ID UUID;
    DECLARE VAR_CARD_ID UUID;

    SELECT
        LOBBY_ID,
        USER_ID
    INTO
        VAR_LOBBY_ID,
        VAR_PLAYER_USER_ID
    FROM PLAYER
    WHERE ID = VAR_PLAYER_ID;

    SELECT
        P.ID,
        C.ID
    INTO
        VAR_VICTIM_PLAYER_ID,
        VAR_CARD_ID
    FROM PLAYER AS P
        INNER JOIN HAND AS H ON H.PLAYER_ID = P.ID
        INNER JOIN CARD AS C ON C.ID = H.CARD_ID
    WHERE P.LOBBY_ID = VAR_LOBBY_ID
        AND P.ID <> VAR_PLAYER_ID
    ORDER BY RAND()
    LIMIT 1;

    UPDATE PLAYER
    SET CREDITS_SPENT = CREDITS_SPENT + 1
    WHERE ID = VAR_PLAYER_ID;

    DELETE FROM HAND
    WHERE PLAYER_ID = VAR_VICTIM_PLAYER_ID
        AND CARD_ID = VAR_CARD_ID;

    UPDATE PLAYER
    SET CREDITS_SPENT = CREDITS_SPENT - 1
    WHERE ID = VAR_VICTIM_PLAYER_ID;

    INSERT INTO LOG_DRAW (PLAYER_USER_ID, CARD_ID, SPECIAL_CATEGORY)
    VALUES (VAR_PLAYER_USER_ID, VAR_CARD_ID, 'STEAL');

    CALL SP_PLAY_CARD (VAR_PLAYER_ID, VAR_CARD_ID, 'STEAL');
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE SP_PLAY_SURPRISE_CARD (
    IN VAR_PLAYER_ID UUID
)
BEGIN
    DECLARE VAR_LOBBY_ID UUID;
    DECLARE VAR_PLAYER_USER_ID UUID;
    DECLARE VAR_CARD_ID UUID;

    SELECT
        LOBBY_ID,
        USER_ID
    INTO
        VAR_LOBBY_ID,
        VAR_PLAYER_USER_ID
    FROM PLAYER
    WHERE ID = VAR_PLAYER_ID;

    SELECT DP.CARD_ID
    INTO VAR_CARD_ID
    FROM DRAW_PILE AS DP
        INNER JOIN CARD AS C ON C.ID = DP.CARD_ID
    WHERE DP.LOBBY_ID = VAR_LOBBY_ID
        AND C.CATEGORY = 'RESPONSE'
    ORDER BY RAND()
    LIMIT 1;

    DELETE FROM DRAW_PILE
    WHERE CARD_ID = VAR_CARD_ID;

    UPDATE PLAYER
    SET CREDITS_SPENT = CREDITS_SPENT + 1
    WHERE ID = VAR_PLAYER_ID;

    INSERT INTO LOG_DRAW (PLAYER_USER_ID, CARD_ID, SPECIAL_CATEGORY)
    VALUES (VAR_PLAYER_USER_ID, VAR_CARD_ID, 'SURPRISE');

    CALL SP_PLAY_CARD (VAR_PLAYER_ID, VAR_CARD_ID, 'SURPRISE');
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE SP_PLAY_WILD_CARD (
    IN VAR_PLAYER_ID UUID,
    IN VAR_CARD_TEXT VARCHAR(255)
)
BEGIN
    DECLARE VAR_LOBBY_ID UUID;
    DECLARE VAR_PLAYER_USER_ID UUID;
    DECLARE VAR_CARD_ID UUID;

    SET VAR_CARD_ID = UUID();

    SELECT
        LOBBY_ID,
        USER_ID
    INTO
        VAR_LOBBY_ID,
        VAR_PLAYER_USER_ID
    FROM PLAYER
    WHERE ID = VAR_PLAYER_ID;

    INSERT INTO CARD (ID, DECK_ID, CATEGORY, TEXT)
    VALUES (VAR_CARD_ID, '00000000-0000-0000-0000-000000000000', 'RESPONSE', VAR_CARD_TEXT);

    UPDATE PLAYER
    SET CREDITS_SPENT = CREDITS_SPENT + 2
    WHERE ID = VAR_PLAYER_ID;

    INSERT INTO LOG_DRAW (PLAYER_USER_ID, CARD_ID, SPECIAL_CATEGORY)
    VALUES (VAR_PLAYER_USER_ID, VAR_CARD_ID, 'WILD');

    CALL SP_PLAY_CARD (VAR_PLAYER_ID, VAR_CARD_ID, 'WILD');
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE SP_WITHDRAWAL_CARD (
    IN VAR_PLAYER_ID UUID,
    IN VAR_CARD_ID UUID
)
BEGIN
    DECLARE VAR_LOBBY_ID UUID;
    DECLARE VAR_PLAYER_USER_ID UUID;
    DECLARE VAR_JUDGE_USER_ID UUID;

    SELECT
        LOBBY_ID,
        USER_ID
    INTO
        VAR_LOBBY_ID,
        VAR_PLAYER_USER_ID
    FROM PLAYER
    WHERE ID = VAR_PLAYER_ID;

    SELECT P.USER_ID
    INTO VAR_JUDGE_USER_ID
    FROM JUDGE AS J
        INNER JOIN PLAYER AS P ON P.ID = J.PLAYER_ID
    WHERE J.LOBBY_ID = VAR_LOBBY_ID;

    INSERT INTO HAND (PLAYER_ID, CARD_ID)
    VALUES (VAR_PLAYER_ID, VAR_CARD_ID);

    DELETE FROM LOG_PLAY
    WHERE PLAYER_USER_ID = VAR_PLAYER_USER_ID
        AND JUDGE_USER_ID = VAR_JUDGE_USER_ID
        AND CARD_ID = VAR_CARD_ID;

    DELETE FROM BOARD
    WHERE LOBBY_ID = VAR_LOBBY_ID
        AND PLAYER_ID = VAR_PLAYER_ID
        AND CARD_ID = VAR_CARD_ID;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE SP_DISCARD_HAND (
    IN VAR_PLAYER_ID UUID
)
BEGIN
    DECLARE VAR_PLAYER_USER_ID UUID;

    SELECT USER_ID
    INTO VAR_PLAYER_USER_ID
    FROM PLAYER
    WHERE ID = VAR_PLAYER_ID;

    INSERT INTO LOG_DISCARD (PLAYER_USER_ID, CARD_ID)
    SELECT
        VAR_PLAYER_USER_ID AS PLAYER_USER_ID,
        CARD_ID
    FROM HAND
    WHERE PLAYER_ID = VAR_PLAYER_ID
        AND IS_LOCKED = 0;

    DELETE FROM HAND
    WHERE PLAYER_ID = VAR_PLAYER_ID
        AND IS_LOCKED = 0;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE SP_DISCARD_CARD (
    IN VAR_PLAYER_ID UUID,
    IN VAR_CARD_ID UUID
)
BEGIN
    DECLARE VAR_PLAYER_USER_ID UUID;

    SELECT USER_ID
    INTO VAR_PLAYER_USER_ID
    FROM PLAYER
    WHERE ID = VAR_PLAYER_ID;

    IF EXISTS(
        SELECT ID
        FROM HAND
        WHERE PLAYER_ID = VAR_PLAYER_ID
            AND CARD_ID = VAR_CARD_ID
            AND IS_LOCKED = 0
    ) THEN
        DELETE FROM HAND
        WHERE PLAYER_ID = VAR_PLAYER_ID
            AND CARD_ID = VAR_CARD_ID;

        INSERT INTO LOG_DISCARD (PLAYER_USER_ID, CARD_ID)
        VALUES (VAR_PLAYER_USER_ID, VAR_CARD_ID);
    END IF;
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE SP_PICK_WINNER (
    IN VAR_LOBBY_ID UUID,
    IN VAR_CARD_ID UUID
)
BEGIN
    DECLARE VAR_PLAYER_ID UUID;
    DECLARE VAR_PLAYER_USER_ID UUID;
    DECLARE VAR_JUDGE_USER_ID UUID;
    DECLARE VAR_SPECIAL_CATEGORY ENUM('STEAL','SURPRISE','WILD');

    SELECT
        PLAYER_ID,
        SPECIAL_CATEGORY
    INTO
        VAR_PLAYER_ID,
        VAR_SPECIAL_CATEGORY
    FROM BOARD
    WHERE LOBBY_ID = VAR_LOBBY_ID
        AND CARD_ID = VAR_CARD_ID;

    SELECT USER_ID
    INTO VAR_PLAYER_USER_ID
    FROM PLAYER
    WHERE ID = VAR_PLAYER_ID;

    SELECT P.USER_ID
    INTO VAR_JUDGE_USER_ID
    FROM LOBBY AS L
        INNER JOIN JUDGE AS J ON J.LOBBY_ID = L.ID
        INNER JOIN PLAYER AS P ON P.ID = J.PLAYER_ID
    WHERE L.ID = VAR_LOBBY_ID;

    INSERT INTO WIN (LOBBY_ID, PLAYER_ID)
    VALUES (VAR_LOBBY_ID, VAR_PLAYER_ID);

    INSERT INTO LOG_WIN (PLAYER_USER_ID, JUDGE_USER_ID, CARD_ID, SPECIAL_CATEGORY)
    VALUES (VAR_PLAYER_USER_ID, VAR_JUDGE_USER_ID, VAR_CARD_ID, VAR_SPECIAL_CATEGORY);

    -- DELETE ANY WILD CARDS
    DELETE C
    FROM CARD AS C
        LEFT JOIN BOARD AS B ON B.CARD_ID = C.ID
    WHERE C.DECK_ID = '00000000-0000-0000-0000-000000000000'
        AND (B.LOBBY_ID IS NULL OR B.LOBBY_ID = VAR_LOBBY_ID);

    DELETE FROM BOARD
    WHERE LOBBY_ID = VAR_LOBBY_ID;

    SELECT U.NAME
    FROM PLAYER AS P
        INNER JOIN USER AS U ON U.ID = P.USER_ID
    WHERE P.ID = VAR_PLAYER_ID;
END;
//
DELIMITER ;

CREATE TABLE LOG_DRAW
(
    ID UUID NOT NULL DEFAULT UUID(),
    CREATED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),

    PLAYER_USER_ID UUID NULL,
    CARD_ID UUID NULL,
    SPECIAL_CATEGORY ENUM('STEAL','SURPRISE','WILD') NULL DEFAULT NULL,

    PRIMARY KEY (ID),
    FOREIGN KEY (PLAYER_USER_ID) REFERENCES USER (ID) ON DELETE SET NULL,
    FOREIGN KEY (CARD_ID) REFERENCES CARD (ID) ON DELETE SET NULL
);

CREATE TABLE LOG_DISCARD
(
    ID UUID NOT NULL DEFAULT UUID(),
    CREATED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),

    PLAYER_USER_ID UUID NULL,
    CARD_ID UUID NULL,

    PRIMARY KEY (ID),
    FOREIGN KEY (PLAYER_USER_ID) REFERENCES USER (ID) ON DELETE SET NULL,
    FOREIGN KEY (CARD_ID) REFERENCES CARD (ID) ON DELETE SET NULL
);

CREATE TABLE LOG_SKIP
(
    ID UUID NOT NULL DEFAULT UUID(),
    CREATED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),

    PLAYER_USER_ID UUID NULL,
    CARD_ID UUID NULL,

    PRIMARY KEY (ID),
    FOREIGN KEY (PLAYER_USER_ID) REFERENCES USER (ID) ON DELETE SET NULL,
    FOREIGN KEY (CARD_ID) REFERENCES CARD (ID) ON DELETE SET NULL
);

CREATE TABLE LOG_PLAY
(
    ID UUID NOT NULL DEFAULT UUID(),
    CREATED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),

    PLAYER_USER_ID UUID NULL,
    JUDGE_USER_ID UUID NULL,
    CARD_ID UUID NULL,
    SPECIAL_CATEGORY ENUM('STEAL','SURPRISE','WILD') NULL DEFAULT NULL,

    PRIMARY KEY (ID),
    FOREIGN KEY (PLAYER_USER_ID) REFERENCES USER (ID) ON DELETE SET NULL,
    FOREIGN KEY (JUDGE_USER_ID) REFERENCES USER (ID) ON DELETE SET NULL,
    FOREIGN KEY (CARD_ID) REFERENCES CARD (ID) ON DELETE SET NULL
);

CREATE TABLE LOG_WIN
(
    ID UUID NOT NULL DEFAULT UUID(),
    CREATED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),

    PLAYER_USER_ID UUID NULL,
    JUDGE_USER_ID UUID NULL,
    CARD_ID UUID NULL,
    SPECIAL_CATEGORY ENUM('STEAL','SURPRISE','WILD') NULL DEFAULT NULL,

    PRIMARY KEY (ID),
    FOREIGN KEY (PLAYER_USER_ID) REFERENCES USER (ID) ON DELETE SET NULL,
    FOREIGN KEY (JUDGE_USER_ID) REFERENCES USER (ID) ON DELETE SET NULL,
    FOREIGN KEY (CARD_ID) REFERENCES CARD (ID) ON DELETE SET NULL
);

CREATE TABLE LOGIN_ATTEMPT
(
    ID UUID NOT NULL DEFAULT UUID(),
    CREATED_ON_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),

    IP_ADDRESS VARCHAR(255) NOT NULL,
    USER_NAME VARCHAR(255) NOT NULL,

    PRIMARY KEY (ID)
);

DELIMITER //
CREATE EVENT EVT_CLEAN_LOGIN_ATTEMPTS
ON SCHEDULE EVERY 1 DAY
DO
BEGIN
    DELETE FROM LOGIN_ATTEMPT
    WHERE CREATED_ON_DATE < DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 2 WEEK);
END;
//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE SP_ALLOW_LOGIN_ATTEMPT (
    IN VAR_IP_ADDRESS VARCHAR(255),
    IN VAR_USER_NAME VARCHAR(255)
)
BEGIN
    DECLARE VAR_LOGIN_ATTEMPTS INT;

    SELECT COUNT(*)
    INTO VAR_LOGIN_ATTEMPTS
    FROM LOGIN_ATTEMPT
    WHERE (IP_ADDRESS = VAR_IP_ADDRESS OR USER_NAME = VAR_USER_NAME)
        AND CREATED_ON_DATE > DATE_SUB(CURRENT_TIMESTAMP(), INTERVAL 1 HOUR);

    IF VAR_LOGIN_ATTEMPTS < 10 THEN
        SELECT 1;
    ELSE
        SELECT 0;
    END IF;
END;
//
DELIMITER ;
