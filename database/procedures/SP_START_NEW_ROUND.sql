CREATE PROCEDURE IF NOT EXISTS SP_START_NEW_ROUND(
    IN VAR_LOBBY_ID UUID
)
BEGIN
    DECLARE VAR_PLAYER_COUNT UUID;
    DECLARE VAR_CURRENT_JUDGE_POSITION INT;
    DECLARE VAR_NEXT_JUDGE_POSITION INT;
    DECLARE VAR_NEXT_JUDGE_PLAYER_ID UUID;

    SELECT COUNT(*)
    INTO VAR_PLAYER_COUNT
    FROM PLAYER
    WHERE IS_ACTIVE = 1
      AND LOBBY_ID = VAR_LOBBY_ID;

    SELECT JUDGE_POSITION
    INTO VAR_CURRENT_JUDGE_POSITION
    FROM LOBBY
    WHERE ID = VAR_LOBBY_ID;

    SET VAR_NEXT_JUDGE_POSITION = VAR_CURRENT_JUDGE_POSITION + 1;
    IF VAR_NEXT_JUDGE_POSITION > VAR_PLAYER_COUNT THEN
        SET VAR_NEXT_JUDGE_POSITION = 1;
    END IF;

    SELECT PLAYER_ID
    INTO VAR_NEXT_JUDGE_PLAYER_ID
    FROM (SELECT ID                                                           AS PLAYER_ID,
                 RANK() OVER (PARTITION BY LOBBY_ID ORDER BY CREATED_ON_DATE) AS JOIN_ORDER
          FROM PLAYER
          WHERE IS_ACTIVE = 1
            AND LOBBY_ID = VAR_LOBBY_ID) AS T
    WHERE JOIN_ORDER = VAR_NEXT_JUDGE_POSITION;

    UPDATE LOBBY
    SET ROUND_ID       = UUID(),
        JUDGE_POSITION = VAR_NEXT_JUDGE_POSITION,
        PROMPT_CARD_ID = FN_GET_RANDOM_PROMPT_CARD(VAR_LOBBY_ID)
    WHERE ID = VAR_LOBBY_ID;

    UPDATE PLAYER
    SET IS_JUDGE = (ID = VAR_NEXT_JUDGE_PLAYER_ID)
    WHERE LOBBY_ID = VAR_LOBBY_ID;

    -- CLEAR ALL RESPONSES
    DELETE R
    FROM RESPONSE AS R
             INNER JOIN PLAYER AS P ON P.ID = R.PLAYER_ID
    WHERE P.LOBBY_ID = VAR_LOBBY_ID;

    -- DELETE ANY WILD CARDS
    DELETE C
    FROM CARD AS C
             INNER JOIN RESPONSE_CARD AS RC ON RC.CARD_ID = C.ID
             INNER JOIN RESPONSE AS R ON R.ID = RC.RESPONSE_ID
             INNER JOIN PLAYER AS P ON P.ID = R.PLAYER_ID
    WHERE C.DECK_ID = '00000000-0000-0000-0000-000000000000'
      AND P.LOBBY_ID = VAR_LOBBY_ID;
END;